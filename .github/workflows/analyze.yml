name: Analyze WinGo

on:
  workflow_dispatch:
    inputs:
      limit:
        description: "Rows to load from Neon"
        required: false
        default: "2000"
      preset:
        description: "Signal frequency preset"
        required: false
        default: "balanced"
        type: choice
        options:
          - conservative
          - balanced
          - aggressive
          - very_aggressive
      max_signals:
        description: "Max signals per analysis run"
        required: false
        default: "5"
        type: number
  # 5-min schedule during peak hours, 10-min during off-peak (IST 09:00‚Äì01:30)
  # IST 09:00 = 03:30 UTC start; run every 5 min during peak, 10 min during off-peak
  schedule:
    - cron: "*/5 4-18 * * *"   # 10:00‚Äì00:00 IST every 5 min (peak hours)
    - cron: "*/10 3,19 * * *"  # 09:00‚Äì10:00 and 00:00‚Äì01:00 IST every 10 min (off-peak)
    - cron: "0 20 * * *"       # 01:30 IST final run

concurrency:
  group: analyze-wingo
  cancel-in-progress: true

jobs:
  run-analyzer:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: requirements.txt

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Smart mid-period timing optimization with timeout protection
        run: |
          echo "üïê Calculating optimal start time for mid-period analysis..."
          current_second=$(date +%S)
          target_second=40
          if [ $current_second -lt $target_second ]; then
            sleep_time=$((target_second - current_second))
          else
            sleep_time=$((60 + target_second - current_second))
          fi
          
          # Timeout protection: max 55s sleep to prevent hitting GitHub's limits
          if [ $sleep_time -gt 55 ]; then
            echo "‚ö†Ô∏è  Sleep time ${sleep_time}s exceeds safety limit, using 55s max"
            sleep_time=55
          fi
          
          echo "‚è±  Sleeping ${sleep_time}s to reach optimal timing..."
          timeout 60 sleep $sleep_time || echo "‚è∞ Sleep timeout reached"
          echo "‚úÖ Reached optimal mid-period timing ($(date +%S)s)"

      - name: Run momentum analysis (optimized timing)
        env:
          NEON_CONN_STR: ${{ secrets.NEON_CONN_STR }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          PRESET: ${{ github.event.inputs.preset || 'balanced' }}
          MAX_SIGNALS: ${{ github.event.inputs.max_signals || 3 }}
          MIN_SOURCES: ${{ github.event.inputs.min_sources || 2 }}
          COLOR_PROB: ${{ github.event.inputs.color_prob_threshold || 0.68 }}
          LIMIT: ${{ github.event.inputs.limit || 2000 }}
        run: |
          echo "üöÄ Starting WinGo Momentum Analysis (Mid-period optimized)"
          python analyze.py \
            --source db \
            --preset $PRESET \
            --max_signals $MAX_SIGNALS \
            --min_sources $MIN_SOURCES \
            --color_prob_threshold $COLOR_PROB \
            --limit $LIMIT \
            --enable_alert \
            --log_to_db \
            --fast_mode \
            --mid_period_mode
